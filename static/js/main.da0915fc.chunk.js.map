{"version":3,"sources":["redux/actions.js","redux/types.js","components/comparison/add-button.jsx","components/global-view/index.jsx","components/combobox/index.jsx","processing/processDataUtils.js","components/detail-charts/index.jsx","components/comparison/index.jsx","components/tabs/index.jsx","components/preloader/index.jsx","App.js","serviceWorker.js","redux/reducers.js","index.js","redux/store.js"],"names":["loadDataAction","dispatch","axios","get","then","data","type","catch","error","console","log","alert","changeActiveTab","activeTab","openCountryDetailAction","country","selectedCountry","addCountryToComparisonAction","removeCountryFromComparisonAction","clearComparisonAction","props","title","className","onClick","formatDailyInc","numberString","number","parseInt","isNaN","toLocaleString","formatNumber","columns","Header","accessor","Cell","cell","value","Table","useTable","initialState","sortBy","id","desc","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","i","getCellProps","values","Combobox","handleChange","event","onChange","target","this","items","selected","defaultValue","item","key","React","Component","favoriteCountries","filterEmptyRecords","Object","keys","forEach","filter","confirmed","dataToGlobalViewByCountries","result","push","parseArrayData","List","dataToCountryList","entries","today","yesterday","lastTwoDays","slice","length","recovered","deaths","active","total","getActive","last","getCountryChartData","countryItems","itemValue","prevItem","threshold","Date","parse","date","getChartDataRelative","DetailCharts","handleChangeCountry","setState","state","chartOptions","text","xAxis","series","name","proc","prev","chart","plotOptions","stacking","pointWidth","color","crosshair","yAxis","opposite","countries","options","highcharts","Highcharts","CountryComparison","tickInterval","toArray","isEmpty","width","height","version","xmlns","x1","y1","x2","y2","stroke","strokeWidth","selectedIndex","onSelect","tabIndex","globalViewByCountries","includes","comparisonCountries","Preloader","App","initialized","mapDispatchToProps","actions","connect","stateProps","dispatchProps","Boolean","window","location","hostname","match","action","processors","ReactDOM","store","createStore","rootReducer","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.da0915fc.chunk.js","sourcesContent":["// @flow\nimport axios from 'axios';\nimport * as types from './types';\n\nexport type Actions = {\n    loadDataAction: () => void,\n    changeActiveTab: (number) => void,\n    openCountryDetailAction: (string) => void,\n    addCountryToComparisonAction: (string) => void,\n    removeCountryFromComparisonAction: (string) => void,\n    clearComparisonAction: () => void,\n}\n\nexport const loadDataAction = () => (dispatch: any) => {\n    axios.get('https://pomber.github.io/covid19/timeseries.json')\n        .then(({ data }) => {\n            dispatch({\n                type: types.LOAD_DATA_REQUEST,\n                data: data\n            });\n        })\n        .catch((error) => {\n            // handle error\n            console.log(error);\n            alert(\"Error on loading data\")\n        });\n};\n\nexport const changeActiveTab = (activeTab: number) => (dispatch: any) => {\n    dispatch({\n        type: types.CHANGE_ACTIVE_TAB,\n        activeTab: activeTab,\n    });\n};\n\nexport const openCountryDetailAction = (country: string) => (dispatch: any) => {\n    dispatch({\n        type: types.CHANGE_ACTIVE_TAB,\n        activeTab: 2,\n        selectedCountry: country,\n    });\n};\n\nexport const addCountryToComparisonAction = (country: string) => (dispatch: any) => {\n    dispatch({\n        type: types.ADD_COUNTRY_TO_COMPARISON,\n        country,\n    });\n};\n\nexport const removeCountryFromComparisonAction = (country: string) => (dispatch: any) => {\n    dispatch({\n        type: types.REMOVE_COUNTRY_FROM_COMPARISON,\n        country,\n    });\n};\n\nexport const clearComparisonAction = () => (dispatch: any) => {\n    dispatch({\n        type: types.CLEAR_COMPARISON_LIST,\n    });\n};\n\n","// @flow\n\nexport const LOAD_DATA_REQUEST = 'LOAD_DATA_REQUEST';\nexport const CHANGE_ACTIVE_TAB = 'CHANGE_ACTIVE_TAB';\nexport const ADD_COUNTRY_TO_COMPARISON = 'ADD_COUNTRY_TO_COMPARISON';\nexport const REMOVE_COUNTRY_FROM_COMPARISON = 'REMOVE_COUNTRY_FROM_COMPARISON';\nexport const CLEAR_COMPARISON_LIST = 'CLEAR_COMPARISON_LIST';\n","// @flow\nimport React from 'react';\nimport './index.scss'\n\ntype Props = {\n    onClick: (string) => void,\n}\n\nexport default (props: Props) => (\n    <button title=\"Add to comparison\" className=\"add-button\" onClick={props.onClick}>+</button>\n)\n\n","// @flow\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table'\nimport { List } from 'immutable';\nimport AddToComparisonButton from '../comparison/add-button'\nimport './index.scss'\n\nimport type {CountrySummary} from \"../../processing/processDataUtils\";\n\n\nconst formatDailyInc = (numberString) => {\n    const number = parseInt(numberString);\n    if (isNaN(number)) {\n        return numberString;\n    }\n    if (number < 0) return number.toLocaleString('USD');\n    else if (number === 0) return '';\n    else return '+' + number.toLocaleString('USD');\n};\n\nconst formatNumber = (numberString) => {\n    const number = parseInt(numberString);\n    if (isNaN(number)) {\n        return numberString;\n    }\n    return number.toLocaleString('USD');\n};\n\n\nconst columns = [\n        {\n            Header: 'Country',\n            accessor: 'country',\n        },\n        {\n            Header: 'Total cases',\n            accessor: 'total.confirmed',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'New cases',\n            accessor: 'last.confirmed',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n        {\n            Header: 'Total deaths',\n            accessor: 'total.deaths',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'Last deaths',\n            accessor: 'last.deaths',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n        {\n            Header: 'Total recovered',\n            accessor: 'total.recovered',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'Last recovered',\n            accessor: 'last.recovered',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n        {\n            Header: 'Total active',\n            accessor: 'total.active',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'Active change',\n            accessor: 'last.active',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n    ];\n\ntype Props = {\n    data: List<CountrySummary>,\n    openCountryDetailAction: (string) => void,\n    addCountryToComparisonAction: (string) => void,\n};\n\nexport default function Table(props: Props) {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable(\n        {\n            columns,\n            data: props.data,\n            initialState: {\n                sortBy: [{ id: 'total.confirmed', desc: true }]\n            }\n        },\n        useSortBy\n    );\n\n    return (\n        <>\n            <table className={\"ReactTable\"} {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            // Add the sorting props to control sorting. For this example\n                            // we can add them into the header props\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.render('Header')}\n                                {/* Add a sort direction indicator */}\n\n                            {column.isSorted\n                                ? column.isSortedDesc\n                                    ? <span className=\"sort-asc\"/>\n                                    : <span className=\"sort-desc\"/>\n                                : ''}\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {rows.map(row => {\n                        prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map((cell, i) => {\n                                    if (i === 0) {\n                                        return (\n                                            <td {...cell.getCellProps()}>\n                                                <button onClick={() => props.openCountryDetailAction(cell.row.values.country)}>{cell.render('Cell')}</button>\n                                                <AddToComparisonButton onClick={() => props.addCountryToComparisonAction(cell.row.values.country)}/>\n                                            </td>\n                                        )\n                                    } else {\n                                        return (\n                                            <td className={`global-table-column ${cell.value === 0 ? '' : 'global-table-column-' + i}`} {...cell.getCellProps()}>\n                                                {cell.render('Cell')}\n                                            </td>\n                                        )\n                                    }\n                                })}\n                            </tr>\n                        )}\n                )}\n                </tbody>\n            </table>\n            <br />\n        </>\n    )\n}","// @flow\nimport React from 'react';\nimport { List } from 'immutable';\n\ntype Props = {\n    items: List<string>,\n    selected?: string,\n    onChange: (value: string) => void\n}\n\nexport class Combobox extends React.Component<Props> {\n\n    handleChange = (event: any) => {\n        this.props.onChange(event.target.value)\n    };\n\n    render() {\n        const {\n            items,\n            selected\n        } = this.props;\n\n        return <div>\n            <select defaultValue={ selected } onChange={ this.handleChange }>\n                {items.map(item => (\n                    <option key={item}>{item}</option>\n                ))}\n            </select>\n        </div>;\n    }\n\n}\n\n","// @flow\nimport { List } from 'immutable';\n\nconst favoriteCountries = ['Russia', 'Ukraine', 'Belarus', 'US', 'Italy', 'Israel', 'China', 'Spain', 'Germany'];\n\ntype VirusFields = {\n    confirmed: number,\n    deaths: number,\n    recovered: number,\n    active: number,\n}\n\nexport type DataItem = VirusFields & {|\n    date?: string,\n|}\n\nexport type Data = { [string]: Array<DataItem> }\n\nexport type CountrySummary = {\n    country: string,\n    total: VirusFields,\n    last: VirusFields,\n}\n\ntype ChartData = Array<Array<number>>\n\nexport const filterEmptyRecords = (data: Data): Data => {\n    Object.keys(data).forEach(value => {\n        data[value] = data[value].filter(item => item.confirmed)\n    });\n\n    return data;\n};\n\nexport const dataToGlobalViewByCountries = (data: Data): List<CountrySummary> => {\n    const result: Array<CountrySummary> = [];\n    Object.keys(data).forEach(value => {\n        result.push(parseArrayData(value, data[value]))\n    });\n\n    return List(result);\n};\n\nexport const dataToCountryList = (data: Data): List<string> => {\n    return List(Object.entries(data).map(( [k] ) => k));\n};\n\nconst parseArrayData = (country: string, data: Array<DataItem>): CountrySummary => {\n    const lastTwoDays = data.slice(-2);\n    let today: VirusFields, yesterday: VirusFields;\n    if (lastTwoDays.length === 2) {\n        today = lastTwoDays[1];\n        yesterday = lastTwoDays[0];\n    } else {\n        today = lastTwoDays[0];\n        yesterday = {confirmed: 0, recovered: 0, deaths: 0, active: 0}\n    }\n    return {\n        country,\n        total: {\n            ...today,\n            active: getActive(today)\n        },\n        last: {\n            confirmed: today.confirmed - yesterday.confirmed,\n            deaths: today.deaths - yesterday.deaths,\n            recovered: today.recovered - yesterday.recovered,\n            active: getActive(today) - getActive(yesterday),\n        }\n    }\n};\n\nexport const getActive = (item: VirusFields): number => item.confirmed - item.recovered - item.deaths;\n\nexport const filterFavorite = (data: List<CountrySummary>): List<CountrySummary> =>\n    data.filter(item => favoriteCountries.includes(item.country));\n\nexport const getCountryChartData = (countryItems: Array<DataItem>, itemValue: (item: VirusFields, prev?: VirusFields) => number, threshold: number = 0): ChartData => {\n    let prevItem;\n    return countryItems\n        .filter(item => item.confirmed > threshold)\n        .map(item => {\n            const result = [Date.parse(item.date ? item.date : ''), itemValue(item, prevItem)];\n            prevItem = item;\n            return result;\n        });\n};\n\nexport const getChartDataRelative = (countryItems: Array<DataItem>, itemValue: (item: VirusFields, prev?: VirusFields) => number, threshold: number = 0): ChartData => {\n    let prevItem;\n    return countryItems\n        .filter(item => item.confirmed > threshold)\n        .map((item, i) => {\n            const result = [i, itemValue(item, prevItem)];\n            prevItem = item;\n            return result;\n        });\n};\n\n","// @flow\nimport React from 'react';\nimport { List } from 'immutable';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Combobox } from '../combobox';\nimport * as proc from '../../processing/processDataUtils.js';\n\nimport type { Data } from '../../processing/processDataUtils.js';\n\ntype Props = {\n    data: Data,\n    countries: List<string>,\n    country: string\n}\n\ntype State = {\n    country: string\n}\n\nexport class DetailCharts extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            country: props.country,\n        }\n    }\n\n    handleChangeCountry = (country: string) => {\n        this.setState({ country: country });\n    };\n\n    render() {\n        const chartOptions = [\n            {\n                title: { text: 'Total Cases' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => item.confirmed)\n                }]\n            },\n            {\n                title: { text: 'Daily New Cases' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.confirmed - (prev ? prev.confirmed : 0)),\n                    type: 'column',\n                }]\n            },\n            {\n                title: { text: 'Total cases chart' },\n                xAxis: { type: 'datetime' },\n                chart: {\n                    type: 'column'\n                },\n                plotOptions: {\n                    column: {\n                        stacking: 'normal',\n                        pointWidth: 10,\n                    }\n                },\n                series: [{\n                    name: 'Active',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => proc.getActive(item)),\n                }, {\n                    name: 'Recovered',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => item.recovered),\n                    color: 'green'\n                }, {\n                    name: 'Deaths',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => item.deaths),\n                    color: 'black'\n                }]\n            },\n            {\n                title: { text: 'Active Cases' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => proc.getActive(item))\n                }]\n            },\n            {\n                title: { text: 'Dayly Cases vs Daily Deaths' },\n                xAxis: {\n                    type: 'datetime',\n                    crosshair: true\n                },\n                yAxis: [{\n                    title: { text: 'Cases', }\n                }, {\n                    title: { text: 'deaths', },\n                    opposite: true\n                }],\n                series: [{\n                    name: 'Deaths',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.deaths - (prev ? prev.deaths : 0)),\n                    type: 'column',\n                    color: 'black',\n                    yAxis: 1,\n                }, {\n                    name: 'New Cases',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.confirmed - (prev ? prev.confirmed : 0)),\n                }]\n            },\n            {\n                title: { text: 'Daily New Deaths' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.deaths - (prev ? prev.deaths : 0)),\n                    type: 'column',\n                }]\n            },\n            {\n                title: { text: 'Daily recovered' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.recovered - (prev ? prev.recovered : 0)),\n                    type: 'column',\n                }]\n            },\n        ];\n\n        let key = 0;\n\n        return <div className=\"chart_container\">\n            <Combobox items={this.props.countries}\n                      selected={this.state.country}\n                      onChange={this.handleChangeCountry}/>\n            <br/>\n            {chartOptions.map(options =>\n                <HighchartsReact key={key++}\n                    highcharts={ Highcharts }\n                    options={ options }\n                />\n            )}\n        </div>;\n    }\n\n}\n\n","// @flow\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { List } from 'immutable';\nimport * as proc from '../../processing/processDataUtils.js'\n\nimport type { Data } from '../../processing/processDataUtils.js'\n\n\ntype Props = {\n    data: Data,\n    countries: List<string>,\n    removeCountryFromComparisonAction: (string) => void,\n}\n\nexport class CountryComparison extends React.Component<Props> {\n\n    render() {\n        let key = 0;\n\n        const chartOptions = [\n            {\n                title: { text: 'Total Cases (after reaching 100 cases)' },\n                xAxis: {\n                    title: { text: 'Days after reaching 100 cases' },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(this.props.data[country], item => item.confirmed, 100)\n                    }\n                }).toArray()\n            },\n            {\n                title: { text: 'Daily Cases (after reaching 100 cases)' },\n                xAxis: {\n                    title: { text: 'Days after reaching 100 cases' },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(this.props.data[country], (item, prev) => item.confirmed - (prev ? prev.confirmed : 0), 100)\n                    }\n                }).toArray()\n            },\n            {\n                title: { text: 'Daily Deaths (after reaching 100 cases)' },\n                xAxis: {\n                    title: { text: 'Days after reaching 100 cases' },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(this.props.data[country], (item, prev) => item.deaths - (prev ? prev.deaths : 0), 100)\n                    }\n                }).toArray()\n            },\n        ];\n\n        if (this.props.countries.isEmpty()) {\n            return <h3>Please select countries for comparison on another tabs</h3>\n        } else{\n            return <div className=\"chart_container\">\n                {this.props.countries.map(country =>\n                    <div key={key++}>\n                        <span>{country}</span>\n                        <button title='Remove country' onClick={() => this.props.removeCountryFromComparisonAction(country)}>\n                            <svg width=\"8\" height=\"10\" version=\"1.1\"\n                                 xmlns=\"http://www.w3.org/2000/svg\">\n                                <line x1=\"1\" y1=\"7\" x2=\"7\" y2=\"1\" stroke=\"red\" strokeWidth=\"1\"/>\n                                <line x1=\"1\" y1=\"1\" x2=\"7\" y2=\"7\" stroke=\"red\" strokeWidth=\"1\"/>\n                            </svg>\n                        </button>\n                    </div>\n                )}\n                <br/>\n                {chartOptions.map(options =>\n                    <HighchartsReact key={key++}\n                                     highcharts={Highcharts}\n                                     options={options}\n                    />\n                )}\n            </div>;\n        }\n    }\n\n}\n\n","// @flow\nimport React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport GlobalViewTable from '../global-view';\nimport { DetailCharts } from '../detail-charts';\nimport { CountryComparison } from '../comparison';\nimport { filterFavorite } from '../../processing/processDataUtils'\n\nimport type { AppStore } from '../../redux/reducers'\nimport type { Actions } from '../../redux/actions'\n\nexport default (props: AppStore & Actions) => (\n    <Tabs selectedIndex={props.activeTab} onSelect={tabIndex => props.changeActiveTab(tabIndex)}>\n        <TabList>\n            <Tab>Global view</Tab>\n            <Tab>Favorite countries</Tab>\n            <Tab>Details</Tab>\n            <Tab>Comparison</Tab>\n        </TabList>\n\n        <TabPanel>\n            <GlobalViewTable data={props.globalViewByCountries}\n                             openCountryDetailAction={props.openCountryDetailAction}\n                             addCountryToComparisonAction={props.addCountryToComparisonAction} />\n        </TabPanel>\n        <TabPanel>\n            <GlobalViewTable data={filterFavorite(props.globalViewByCountries)}\n                             openCountryDetailAction={props.openCountryDetailAction}\n                             addCountryToComparisonAction={props.addCountryToComparisonAction} />\n        </TabPanel>\n        <TabPanel>\n            <DetailCharts countries={props.countries} country={props.selectedCountry} data={props.data} />\n        </TabPanel>\n        <TabPanel>\n            <CountryComparison countries={props.comparisonCountries} data={props.data} removeCountryFromComparisonAction={props.removeCountryFromComparisonAction}/>\n        </TabPanel>\n    </Tabs>\n);","import React from 'react';\nimport './index.scss';\n\nexport const Preloader = props => <div id=\"cube-loader\">\n    <div className=\"caption\">\n        <div className=\"cube-loader\">\n            <div className=\"cube loader-1\"/>\n            <div className=\"cube loader-2\"/>\n            <div className=\"cube loader-4\"/>\n            <div className=\"cube loader-3\"/>\n        </div>\n    </div>\n</div>;\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from \"./redux/actions\";\nimport Tabs from './components/tabs'\nimport { Preloader } from './components/preloader'\nimport './App.css';\n\nimport type { AppStore } from './redux/reducers'\nimport type { Actions } from './redux/actions'\n\n// TODO KK Back button support\n\nclass App extends React.Component<Actions & AppStore> {\n\n    componentDidMount(): void {\n        this.props.loadDataAction()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        } else {\n            return (\n                <div className=\"App\">\n                    <Tabs {...this.props}/>\n                </div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = {\n    ...actions\n};\n\nconst mergeProps = (stateProps, dispatchProps) => {\n    return {\n        ...stateProps,\n        ...dispatchProps,\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\nimport { List } from 'immutable';\nimport * as types from './types';\nimport * as processors from \"../processing/processDataUtils\";\n\nimport type { Data, CountrySummary } from \"../processing/processDataUtils\";\n\nexport type AppStore = {\n    data: Data,\n    countries: List<string>,\n    globalViewByCountries: List<CountrySummary>,\n    initialized: boolean,\n    activeTab: number,\n    selectedCountry: string,\n    comparisonCountries: List<string>,\n}\n\nconst initialState: AppStore = {\n    data: List(),\n    countries: List(),\n    globalViewByCountries: List(),\n    initialized: false,\n    activeTab: 0,\n    selectedCountry: 'Russia',\n    comparisonCountries: List(),\n};\n\nexport default (state: AppStore = initialState, action: any): AppStore => {\n    switch (action.type) {\n        case types.LOAD_DATA_REQUEST:\n            return {\n                ...state,\n                data: processors.filterEmptyRecords(action.data),\n                countries: processors.dataToCountryList(action.data),\n                globalViewByCountries: processors.dataToGlobalViewByCountries(action.data),\n                initialized: true\n            };\n        case types.CHANGE_ACTIVE_TAB:\n            return {\n                ...state,\n                activeTab: action.activeTab,\n                selectedCountry: action.selectedCountry ? action.selectedCountry : state.selectedCountry,\n            };\n        case types.ADD_COUNTRY_TO_COMPARISON:\n            return {\n                ...state,\n                comparisonCountries: state.comparisonCountries.includes(action.country)\n                    ? state.comparisonCountries\n                    : state.comparisonCountries.push(action.country),\n            };\n        case types.REMOVE_COUNTRY_FROM_COMPARISON:\n            return {\n                ...state,\n                comparisonCountries: state.comparisonCountries.filter(value => value !== action.country),\n            };\n        case types.CLEAR_COMPARISON_LIST:\n            return {\n                ...state,\n                comparisonCountries: List(),\n            };\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { configureStore } from './redux/store';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <Provider store={ configureStore() }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// @flow\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nexport function configureStore() {\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    );\n}\n"],"sourceRoot":""}