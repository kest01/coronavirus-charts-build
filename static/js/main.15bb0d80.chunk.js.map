{"version":3,"sources":["redux/actions.js","redux/types.js","components/comparison/add-button.jsx","components/global-view/index.jsx","components/combobox/index.jsx","processing/processDataUtils.js","components/detail-charts/index.jsx","components/comparison/index.jsx","components/tabs/index.jsx","components/preloader/index.jsx","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["loadDataAction","dispatch","axios","get","then","data","type","catch","error","console","log","alert","addCountryToComparisonAction","country","removeCountryFromComparisonAction","updateChartThresholdAction","newThreshold","props","title","className","onClick","formatDailyInc","numberString","number","parseInt","isNaN","toLocaleString","formatNumber","columns","Header","accessor","Cell","cell","value","Table","useTable","initialState","sortBy","id","desc","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","i","getCellProps","to","values","Combobox","handleChange","event","onChange","target","this","items","selected","defaultValue","item","key","React","Component","favoriteCountries","timezoneOffset","Date","getTimezoneOffset","filterEmptyRecords","Object","keys","forEach","filter","confirmed","dataToGlobalViewByCountries","result","push","parseArrayData","List","dataToCountryList","entries","today","yesterday","lastTwoDays","slice","length","recovered","deaths","active","total","getActive","last","getCountryChartData","countryItems","itemValue","prevItem","threshold","parse","date","getChartDataRelative","DetailCharts","handleChangeCountry","setState","state","chartOptions","text","xAxis","series","name","proc","prev","chart","plotOptions","stacking","pointWidth","color","crosshair","yAxis","opposite","countries","options","highcharts","Highcharts","CountryComparison","updateChartThreshold","parseFloat","chartThreshold","tickInterval","toArray","isEmpty","width","height","version","xmlns","x1","y1","x2","y2","stroke","strokeWidth","selectedIndex","store","activeTab","onSelect","globalViewByCountries","includes","selectedCountry","comparisonCountries","Preloader","App","initialized","mapDispatchToProps","actions","connect","stateProps","dispatchProps","Boolean","window","location","hostname","match","action","processors","newTab","pathToTabIndex","payload","pathname","newCountry","queryString","search","undefined","path","history","createBrowserHistory","ReactDOM","initState","createStore","combineReducers","router","connectRouter","reducers","applyMiddleware","routerMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.15bb0d80.chunk.js","sourcesContent":["// @flow\nimport axios from 'axios';\nimport * as types from './types';\n\nexport type Actions = {\n    loadDataAction: () => void,\n    addCountryToComparisonAction: (string) => void,\n    removeCountryFromComparisonAction: (string) => void,\n    updateChartThresholdAction: (number) => void,\n}\n\nexport const loadDataAction = () => (dispatch: any) => {\n    axios.get('https://pomber.github.io/covid19/timeseries.json')\n        .then(({ data }) => {\n            dispatch({\n                type: types.LOAD_DATA_REQUEST,\n                data: data\n            });\n        })\n        .catch((error) => {\n            // handle error\n            console.log(error);\n            alert(\"Error on loading data\")\n        });\n};\n\nexport const addCountryToComparisonAction = (country: string) => (dispatch: any) => {\n    dispatch({\n        type: types.ADD_COUNTRY_TO_COMPARISON,\n        country,\n    });\n};\n\nexport const removeCountryFromComparisonAction = (country: string) => (dispatch: any) => {\n    dispatch({\n        type: types.REMOVE_COUNTRY_FROM_COMPARISON,\n        country,\n    });\n};\n\nexport const updateChartThresholdAction = (newThreshold: number) => (dispatch: any) => {\n    dispatch({\n        type: types.UPDATE_CHART_THRESHOLD,\n        newThreshold,\n    });\n};\n","// @flow\n\nexport const LOAD_DATA_REQUEST = 'LOAD_DATA_REQUEST';\nexport const ADD_COUNTRY_TO_COMPARISON = 'ADD_COUNTRY_TO_COMPARISON';\nexport const REMOVE_COUNTRY_FROM_COMPARISON = 'REMOVE_COUNTRY_FROM_COMPARISON';\nexport const CLEAR_COMPARISON_LIST = 'CLEAR_COMPARISON_LIST';\nexport const UPDATE_CHART_THRESHOLD = 'UPDATE_CHART_THRESHOLD';\nexport const LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\n","// @flow\nimport React from 'react';\nimport './index.scss'\n\ntype Props = {\n    onClick: (string) => void,\n}\n\nexport default (props: Props) => (\n    <button title=\"Add to comparison\" className=\"add-button\" onClick={props.onClick}>+</button>\n)\n\n","// @flow\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table'\nimport { Link } from 'react-router-dom'\nimport { List } from 'immutable';\nimport AddToComparisonButton from '../comparison/add-button'\nimport './index.scss'\n\nimport type {CountrySummary} from \"../../processing/processDataUtils\";\n\n\nconst formatDailyInc = (numberString) => {\n    const number = parseInt(numberString);\n    if (isNaN(number)) {\n        return numberString;\n    }\n    if (number < 0) return number.toLocaleString('en-US');\n    else if (number === 0) return '';\n    else return '+' + number.toLocaleString('en-US');\n};\n\nconst formatNumber = (numberString) => {\n    const number = parseInt(numberString);\n    if (isNaN(number)) {\n        return numberString;\n    }\n    return number.toLocaleString('en-US');\n};\n\n\nconst columns = [\n        {\n            Header: 'Country',\n            accessor: 'country',\n        },\n        {\n            Header: 'Total cases',\n            accessor: 'total.confirmed',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'New cases',\n            accessor: 'last.confirmed',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n        {\n            Header: 'Total deaths',\n            accessor: 'total.deaths',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'Last deaths',\n            accessor: 'last.deaths',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n        {\n            Header: 'Total recovered',\n            accessor: 'total.recovered',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'Last recovered',\n            accessor: 'last.recovered',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n        {\n            Header: 'Total active',\n            accessor: 'total.active',\n            Cell: ({ cell }) => formatNumber(cell.value)\n        },\n        {\n            Header: 'Active change',\n            accessor: 'last.active',\n            Cell: ({ cell }) => formatDailyInc(cell.value)\n        },\n    ];\n\ntype Props = {\n    data: List<CountrySummary>,\n    addCountryToComparisonAction: (string) => void,\n};\n\nexport default function Table(props: Props) {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable(\n        {\n            columns,\n            data: props.data,\n            initialState: {\n                sortBy: [{ id: 'total.confirmed', desc: true }]\n            }\n        },\n        useSortBy\n    );\n\n    return (\n        <>\n            <table className={\"ReactTable\"} {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            // Add the sorting props to control sorting. For this example\n                            // we can add them into the header props\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.render('Header')}\n                                {/* Add a sort direction indicator */}\n\n                            {column.isSorted\n                                ? column.isSortedDesc\n                                    ? <span className=\"sort-asc\"/>\n                                    : <span className=\"sort-desc\"/>\n                                : ''}\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {rows.map(row => {\n                        prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map((cell, i) => {\n                                    if (i === 0) {\n                                        return (\n                                            <td {...cell.getCellProps()}>\n                                                <Link className={'open-country-button'} to={`/details?country=${cell.row.values.country}`}>{cell.render('Cell')}</Link>\n                                                <AddToComparisonButton onClick={() => props.addCountryToComparisonAction(cell.row.values.country)}/>\n                                            </td>\n                                        )\n                                    } else {\n                                        return (\n                                            <td className={`global-table-column ${cell.value === 0 ? '' : 'global-table-column-' + i}`} {...cell.getCellProps()}>\n                                                {cell.render('Cell')}\n                                            </td>\n                                        )\n                                    }\n                                })}\n                            </tr>\n                        )}\n                )}\n                </tbody>\n            </table>\n            <br />\n        </>\n    )\n}","// @flow\nimport React from 'react';\nimport { List } from 'immutable';\n\ntype Props = {\n    items: List<string>,\n    selected?: string,\n    onChange: (value: string) => void\n}\n\nexport class Combobox extends React.Component<Props> {\n\n    handleChange = (event: any) => {\n        this.props.onChange(event.target.value)\n    };\n\n    render() {\n        const {\n            items,\n            selected\n        } = this.props;\n\n        return <div>\n            <select defaultValue={ selected } onChange={ this.handleChange }>\n                {items.map(item => (\n                    <option key={item}>{item}</option>\n                ))}\n            </select>\n        </div>;\n    }\n\n}\n\n","// @flow\nimport { List } from 'immutable';\n\nconst favoriteCountries = ['Russia', 'Ukraine', 'Belarus', 'US', 'Italy', 'Israel', 'China', 'Spain', 'Germany'];\n\ntype VirusFields = {\n    confirmed: number,\n    deaths: number,\n    recovered: number,\n    active: number,\n}\n\nexport type DataItem = VirusFields & {|\n    date?: string,\n|}\n\nexport type Data = { [string]: Array<DataItem> }\n\nexport type CountrySummary = {\n    country: string,\n    total: VirusFields,\n    last: VirusFields,\n}\n\ntype ChartData = Array<Array<number>>\n\nconst timezoneOffset = new Date().getTimezoneOffset() * 60000;\n\nexport const filterEmptyRecords = (data: Data): Data => {\n    Object.keys(data).forEach(value => {\n        data[value] = data[value].filter(item => item.confirmed)\n    });\n\n    return data;\n};\n\nexport const dataToGlobalViewByCountries = (data: Data): List<CountrySummary> => {\n    const result: Array<CountrySummary> = [];\n    Object.keys(data).forEach(value => {\n        result.push(parseArrayData(value, data[value]))\n    });\n\n    return List(result);\n};\n\nexport const dataToCountryList = (data: Data): List<string> => {\n    return List(Object.entries(data).map(( [k] ) => k));\n};\n\nconst parseArrayData = (country: string, data: Array<DataItem>): CountrySummary => {\n    const lastTwoDays = data.slice(-2);\n    let today: VirusFields, yesterday: VirusFields;\n    if (lastTwoDays.length === 2) {\n        today = lastTwoDays[1];\n        yesterday = lastTwoDays[0];\n    } else {\n        today = lastTwoDays[0];\n        yesterday = {confirmed: 0, recovered: 0, deaths: 0, active: 0}\n    }\n    return {\n        country,\n        total: {\n            ...today,\n            active: getActive(today)\n        },\n        last: {\n            confirmed: today.confirmed - yesterday.confirmed,\n            deaths: today.deaths - yesterday.deaths,\n            recovered: today.recovered - yesterday.recovered,\n            active: getActive(today) - getActive(yesterday),\n        }\n    }\n};\n\nexport const getActive = (item: VirusFields): number => item.confirmed - item.recovered - item.deaths;\n\nexport const filterFavorite = (data: List<CountrySummary>): List<CountrySummary> =>\n    data.filter(item => favoriteCountries.includes(item.country));\n\nexport const getCountryChartData = (countryItems: Array<DataItem>, itemValue: (item: VirusFields, prev?: VirusFields) => number, threshold: number = 0): ChartData => {\n    let prevItem;\n    return countryItems\n        .filter(item => item.confirmed > threshold)\n        .map(item => {\n            const result = [Date.parse(item.date ? item.date : '') - timezoneOffset, itemValue(item, prevItem)];\n            prevItem = item;\n            return result;\n        });\n};\n\nexport const getChartDataRelative = (countryItems: Array<DataItem>, itemValue: (item: VirusFields, prev?: VirusFields) => number, threshold: number = 0): ChartData => {\n    let prevItem;\n    return countryItems\n        .filter(item => item.confirmed > threshold)\n        .map((item, i) => {\n            const result = [i, itemValue(item, prevItem)];\n            prevItem = item;\n            return result;\n        });\n};\n\n","// @flow\nimport React from 'react';\nimport { List } from 'immutable';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Combobox } from '../combobox';\nimport * as proc from '../../processing/processDataUtils.js';\n\nimport type { Data } from '../../processing/processDataUtils.js';\n\ntype Props = {\n    data: Data,\n    countries: List<string>,\n    country: string\n}\n\ntype State = {\n    country: string\n}\n\nexport class DetailCharts extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            country: props.country,\n        }\n    }\n\n    handleChangeCountry = (country: string) => {\n        this.setState({ country: country });\n    };\n\n    render() {\n        const chartOptions = [\n            {\n                title: { text: 'Total Cases' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => item.confirmed)\n                }]\n            },\n            {\n                title: { text: 'Daily New Cases' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.confirmed - (prev ? prev.confirmed : 0)),\n                    type: 'column',\n                }]\n            },\n            {\n                title: { text: 'Total cases chart' },\n                xAxis: { type: 'datetime' },\n                chart: {\n                    type: 'column'\n                },\n                plotOptions: {\n                    column: {\n                        stacking: 'normal',\n                        pointWidth: 10,\n                    }\n                },\n                series: [{\n                    name: 'Active',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => proc.getActive(item)),\n                }, {\n                    name: 'Recovered',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => item.recovered),\n                    color: 'green'\n                }, {\n                    name: 'Deaths',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => item.deaths),\n                    color: 'black'\n                }]\n            },\n            {\n                title: { text: 'Active Cases' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], item => proc.getActive(item))\n                }]\n            },\n            {\n                title: { text: 'Daily Cases vs Daily Recovered' },\n                xAxis: {\n                    type: 'datetime',\n                    crosshair: true\n                },\n                yAxis: [{\n                    title: { text: 'Cases', }\n                }, {\n                    title: { text: 'deaths', },\n                    opposite: true\n                }],\n                series: [{\n                    name: 'Recovered',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.recovered - (prev ? prev.recovered : 0)),\n                    type: 'column',\n                    color: 'black',\n                    yAxis: 1,\n                }, {\n                    name: 'New Cases',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.confirmed - (prev ? prev.confirmed : 0)),\n                }]\n            },\n            {\n                title: { text: 'Daily Cases vs Daily Deaths' },\n                xAxis: {\n                    type: 'datetime',\n                    crosshair: true\n                },\n                yAxis: [{\n                    title: { text: 'Cases', }\n                }, {\n                    title: { text: 'deaths', },\n                    opposite: true\n                }],\n                series: [{\n                    name: 'Deaths',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.deaths - (prev ? prev.deaths : 0)),\n                    type: 'column',\n                    color: 'black',\n                    yAxis: 1,\n                }, {\n                    name: 'New Cases',\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.confirmed - (prev ? prev.confirmed : 0)),\n                }]\n            },\n            {\n                title: { text: 'Daily New Deaths' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.deaths - (prev ? prev.deaths : 0)),\n                    type: 'column',\n                }]\n            },\n            {\n                title: { text: 'Daily recovered' },\n                xAxis: { type: 'datetime' },\n                series: [{\n                    name: this.state.country,\n                    data: proc.getCountryChartData(this.props.data[this.state.country], (item, prev) => item.recovered - (prev ? prev.recovered : 0)),\n                    type: 'column',\n                }]\n            },\n        ];\n\n        let key = 0;\n\n        return <div className=\"chart_container\">\n            <Combobox items={this.props.countries}\n                      selected={this.state.country}\n                      onChange={this.handleChangeCountry}/>\n            <br/>\n            {chartOptions.map(options =>\n                <HighchartsReact key={key++}\n                    highcharts={ Highcharts }\n                    options={ options }\n                />\n            )}\n        </div>;\n    }\n\n}\n\n","// @flow\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { List } from 'immutable';\nimport * as proc from '../../processing/processDataUtils.js'\n\nimport type { Data } from '../../processing/processDataUtils.js'\n\n\ntype Props = {\n    data: Data,\n    countries: List<string>,\n    removeCountryFromComparisonAction: (string) => void,\n    updateChartThresholdAction: (number) => void,\n    chartThreshold: number,\n}\n\nexport class CountryComparison extends React.Component<Props> {\n\n    updateChartThreshold = (event: any) => {\n        const newThreshold = parseFloat(event.target.value);\n        if (!isNaN(newThreshold)) {\n            this.props.updateChartThresholdAction(newThreshold)\n        }\n    };\n\n    render() {\n        let key = 0;\n\n        const chartOptions = [\n            {\n                title: { text: `Total Cases (after reaching ${this.props.chartThreshold} cases)` },\n                xAxis: {\n                    title: { text: `Days after reaching ${this.props.chartThreshold} cases` },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(this.props.data[country], item => item.confirmed, this.props.chartThreshold)\n                    }\n                }).toArray()\n            },\n            {\n                title: { text: `Daily Cases (after reaching ${this.props.chartThreshold} cases)` },\n                xAxis: {\n                    title: { text: `Days after reaching ${this.props.chartThreshold} cases` },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(\n                            this.props.data[country],\n                            (item, prev) => item.confirmed - (prev ? prev.confirmed : 0),\n                            this.props.chartThreshold\n                        )\n                    }\n                }).toArray()\n            },\n            {\n                title: { text: `Active Cases (after reaching ${this.props.chartThreshold} cases)` },\n                xAxis: {\n                    title: { text: `Days after reaching ${this.props.chartThreshold} cases` },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(\n                            this.props.data[country],\n                            item => proc.getActive(item),\n                            this.props.chartThreshold)\n                    }\n                }).toArray()\n            },\n            {\n                title: { text: `Total Deaths (after reaching ${this.props.chartThreshold} cases)` },\n                xAxis: {\n                    title: { text: `Days after reaching ${this.props.chartThreshold} cases` },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(\n                            this.props.data[country],\n                            item => item.deaths,\n                            this.props.chartThreshold)\n                    }\n                }).toArray()\n            },\n            {\n                title: { text: `Daily Deaths (after reaching ${this.props.chartThreshold} cases)` },\n                xAxis: {\n                    title: { text: `Days after reaching ${this.props.chartThreshold} cases` },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(\n                            this.props.data[country],\n                            (item, prev) => item.deaths - (prev ? prev.deaths : 0),\n                            this.props.chartThreshold)\n                    }\n                }).toArray()\n            },\n            {\n                title: { text: `Daily Recovers (after reaching ${this.props.chartThreshold} cases)` },\n                xAxis: {\n                    title: { text: `Days after reaching ${this.props.chartThreshold} cases` },\n                    tickInterval: 5\n                },\n                series: this.props.countries.map(country => {\n                    return {\n                        name: country,\n                        data: proc.getChartDataRelative(\n                            this.props.data[country],\n                            (item, prev) => item.recovered - (prev ? prev.recovered : 0),\n                            this.props.chartThreshold)\n                    }\n                }).toArray()\n            },\n        ];\n\n        if (this.props.countries.isEmpty()) {\n            return <h3>Please select countries for comparison on another tabs</h3>\n        } else{\n            return <div className=\"chart_container\">\n                {this.props.countries.map(country =>\n                    <div key={key++}>\n                        <span className={\"comparison-county-label\"}>{country}</span>\n                        <button title='Remove country' className={\"remove-county-button\"} onClick={() => this.props.removeCountryFromComparisonAction(country)}>\n                            <svg width=\"8\" height=\"10\" version=\"1.1\"\n                                 xmlns=\"http://www.w3.org/2000/svg\">\n                                <line x1=\"1\" y1=\"7\" x2=\"7\" y2=\"1\" stroke=\"red\" strokeWidth=\"1\"/>\n                                <line x1=\"1\" y1=\"1\" x2=\"7\" y2=\"7\" stroke=\"red\" strokeWidth=\"1\"/>\n                            </svg>\n                        </button>\n                    </div>\n                )}\n                <br/>\n                <span>Zero point</span>\n                <input className={'chart-threshold-input'}\n                       defaultValue={this.props.chartThreshold}\n                       onChange={this.updateChartThreshold}/>\n                <span>cases</span>\n                <br/>\n                {chartOptions.map(options =>\n                    <HighchartsReact key={key++}\n                                     highcharts={Highcharts}\n                                     options={options}\n                    />\n                )}\n            </div>;\n        }\n    }\n\n}\n\n","// @flow\nimport React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { Link } from 'react-router-dom'\nimport 'react-tabs/style/react-tabs.css';\nimport GlobalViewTable from '../global-view';\nimport { DetailCharts } from '../detail-charts';\nimport { CountryComparison } from '../comparison';\nimport { filterFavorite } from '../../processing/processDataUtils'\n\nimport type { AppStore } from '../../redux/reducers'\nimport type { Actions } from '../../redux/actions'\n\nexport default (props: { store: AppStore} & Actions) => (\n    <Tabs selectedIndex={props.store.activeTab} onSelect={() => {}}>\n        <TabList>\n            <Tab><Link to={'/'} id='tab-link-0'>Global view</Link></Tab>\n            <Tab><Link to={'/favorite'} id='tab-link-1'>Favorite countries</Link></Tab>\n            <Tab><Link to={'/details'} id='tab-link-2'>Details</Link></Tab>\n            <Tab><Link to={'/comparison'} id='tab-link-3'>Comparison</Link></Tab>\n        </TabList>\n\n        <TabPanel>\n            <GlobalViewTable data={props.store.globalViewByCountries}\n                             addCountryToComparisonAction={props.addCountryToComparisonAction} />\n        </TabPanel>\n        <TabPanel>\n            <GlobalViewTable data={filterFavorite(props.store.globalViewByCountries)}\n                             addCountryToComparisonAction={props.addCountryToComparisonAction} />\n        </TabPanel>\n        <TabPanel>\n            <DetailCharts countries={props.store.countries} country={props.store.selectedCountry} data={props.store.data} />\n        </TabPanel>\n        <TabPanel>\n            <CountryComparison countries={props.store.comparisonCountries}\n                               data={props.store.data}\n                               removeCountryFromComparisonAction={props.removeCountryFromComparisonAction}\n                               chartThreshold={props.store.chartThreshold}\n                               updateChartThresholdAction={props.updateChartThresholdAction}\n            />\n        </TabPanel>\n    </Tabs>\n);","import React from 'react';\nimport './index.scss';\n\nexport const Preloader = props => <div id=\"cube-loader\">\n    <div className=\"caption\">\n        <div className=\"cube-loader\">\n            <div className=\"cube loader-1\"/>\n            <div className=\"cube loader-2\"/>\n            <div className=\"cube loader-4\"/>\n            <div className=\"cube loader-3\"/>\n        </div>\n    </div>\n</div>;\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from \"./redux/actions\";\nimport Tabs from './components/tabs'\nimport { Preloader } from './components/preloader'\nimport './App.css';\n\nimport type { AppStore } from './redux/reducers'\nimport type { Actions } from './redux/actions'\n\n// TODO KK Back button support\n\nclass App extends React.Component<Actions & AppStore> {\n\n    componentDidMount(): void {\n        this.props.loadDataAction()\n    }\n\n    render() {\n        if (!this.props.store.initialized) {\n            return <Preloader/>\n        } else {\n            return (\n                <div className=\"App\">\n                    <Tabs {...this.props}/>\n                </div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = {\n    ...actions\n};\n\nconst mergeProps = (stateProps, dispatchProps) => {\n    return {\n        ...stateProps,\n        ...dispatchProps,\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\nimport { List } from 'immutable';\nimport queryString from 'query-string';\nimport * as types from './types';\nimport * as processors from \"../processing/processDataUtils\";\n\nimport type { Data, CountrySummary } from \"../processing/processDataUtils\";\n\nexport type AppStore = {\n    data: Data,\n    countries: List<string>,\n    globalViewByCountries: List<CountrySummary>,\n    initialized: boolean,\n    activeTab: number,\n    chartThreshold: number,\n    selectedCountry: string,\n    comparisonCountries: List<string>,\n}\n\nexport const initialState: AppStore = {\n    data: List(),\n    countries: List(),\n    globalViewByCountries: List(),\n    initialized: false,\n    activeTab: 0,\n    chartThreshold: 100,\n    selectedCountry: 'Russia',\n    comparisonCountries: List(),\n};\n\nexport default (state: AppStore = initialState, action: any): AppStore => {\n    switch (action.type) {\n        case types.LOAD_DATA_REQUEST:\n            return {\n                ...state,\n                data: processors.filterEmptyRecords(action.data),\n                countries: processors.dataToCountryList(action.data),\n                globalViewByCountries: processors.dataToGlobalViewByCountries(action.data),\n                initialized: true\n            };\n        case types.LOCATION_CHANGE:\n            const newTab = pathToTabIndex(action.payload.location.pathname);\n            const newCountry = newTab === 2 ? queryString.parse(action.payload.location.search).country : undefined;\n            return {\n                ...state,\n                activeTab: pathToTabIndex(action.payload.location.pathname),\n                selectedCountry: newCountry ? newCountry : state.selectedCountry,\n            };\n        case types.ADD_COUNTRY_TO_COMPARISON:\n            return {\n                ...state,\n                comparisonCountries: state.comparisonCountries.includes(action.country)\n                    ? state.comparisonCountries\n                    : state.comparisonCountries.push(action.country),\n            };\n        case types.REMOVE_COUNTRY_FROM_COMPARISON:\n            return {\n                ...state,\n                comparisonCountries: state.comparisonCountries.filter(value => value !== action.country),\n            };\n        case types.UPDATE_CHART_THRESHOLD:\n            return {\n                ...state,\n                chartThreshold: action.newThreshold,\n            };\n        default:\n            return state\n    }\n}\n\nconst pathToTabIndex = (path: string): number => {\n    switch (path) {\n        case '/': return 0;\n        case '/favorite': return 1;\n        case '/details': return 2;\n        case '/comparison': return 3;\n        default: return 0;\n    }\n};","// @flow\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport { initialState } from './reducers';\nimport { combineReducers } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history'\nimport type {AppStore} from \"./reducers\";\n\nexport const history = createBrowserHistory();\n\nconst createRootReducer = (history) => combineReducers({\n    router: connectRouter(history),\n    store: reducers\n});\n\nexport function configureStore(initState: AppStore) {\n    return createStore(\n        createRootReducer(history),\n        initState ? initState : { store: initialState},\n        applyMiddleware(\n            routerMiddleware(history),\n            thunk,\n        ),\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ConnectedRouter } from 'connected-react-router'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { configureStore, history } from './redux/store';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <Provider store={ configureStore() }>\n      <ConnectedRouter history={history}>\n          <App />\n      </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}